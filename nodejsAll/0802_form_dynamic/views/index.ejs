<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- ejs라서 cdn으로 가져오는것. js파일은 그냥 npm인스톨 하면 됨. -->
    <!-- jquery cdn -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>

<body>
    <!-- 페이지로 연결할거 아니여서 action안써도 됨. 비동기 http는 폼태그가 필요없음. 내일 공부... -->
    <form name="register">
        <label for="name">이름</label>
        <input type="text" id="name">
        <br />
        <input type="radio" name="gender" value="남자" id="male">
        <label for="male">남자</label>
        <input type="radio" name="gender" value="여자" id="female">
        <label for="female">여자</label>
        <br />
        <!-- 이제 제출하지 않을거라서 type을 submit 안해도 됨. 
        default가 submit이라 꼭 타입 따로 지정해줘야함. -->
        <button type="button" onclick="ajaxGet()">ajax get 제출</button>
        <button type="button" onclick="ajaxPost()">ajax post 제출</button>
        <button type="button" onclick="axiosGet()">axios get 제출</button>
        <button type="button" onclick="axiosPost()">axios post 제출</button>
        <button type="button" onclick="fetchGet()">fetch get 제출</button>
        <button type="button" onclick="fetchPost()">fetch post 제출</button>

        <!-- 클릭하면 ajaxGet()실행되는 버튼 -->
    </form>

    <div class="result"></div>
    <script>
        const resultBox = document.querySelector('.result');

        function ajaxGet() {

            console.log('ajax get')
            //폼 선택하기
            const form = document.forms['register'];//폼의 name을 가져오면 선택됨, 함수 이름과 같으면 오류뜸

            console.log(form);
            //document.form에서 밸류 가져오는법
            console.log(form.name); //입력해야하는건 id값을 가져와도 되고
            console.log(form.gender); //선택해야하는건 name으로 가져와야함.
            console.log(form.name.value);
            console.log(form.gender.value);


            //ajax
            const data = {
                name: form.name.value,
                gender: form.gender.value
            }
            $.ajax({
                type: 'GET',
                url: '/ajax', //주소는 같되 타입을 다르게 할 수 있음. 
                data: data,  //value가 변수로 왔을때 는 안써도됨, data만 써도됨.
                success: (res) => {
                    console.log('res', res);
                    resultBox.textContent = `get / ajax 요청완료 ${res.name}님은 ${res.gender}입니다`
                    resultBox.style.color = 'blue'
                },
            })
        }
        function ajaxPost() {
            console.log('ajax post');
            const form = document.forms['register']
            //예외처리
            if (form.name.value === '') {
                alert('이름을 입력하세요')
                return; //예외처리할때 return 필수
            }
            const data = {
                name: form.name.value,
                gender: form.gender.value,

            }
            $.ajax({
                type: 'POST',
                url: '/ajax',
                data: data,
                success: (res) => {
                    console.log('res', res);
                    resultBox.textContent = `POST /ajax 요청완료 ${res.name}님은 ${res.gender}입니다`
                    resultBox.style.color = 'red';
                },
            })
        }
        function axiosGet() {
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value,
            };
            console.log('axios get')
            axios({
                method: 'GET',
                url: 'axios',
                params: data
            }).then(res => {
                console.log('res', res);
                resultBox.textContent = `Get /axios 요청 완료${res.data.name}님은 ${res.data.gender}입니다`
                resultBox.style.color = 'green'

            })
        }
        async function axiosPost() {
            console.log('axios post');
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value,
            };
            const res = await axios({
                method: 'POST',
                url: '/axios',
                data
            });
            const { name, gender} = res.data
            console.log('res',res)
            
            resultBox.textContent = `POST /axios 요청 완료 ${name}님은 ${gender}입니다`
            resultBox.style.color ='purple'
        }
        function fetchGet() {
            console.log('fetch get');
            const form = document.forms['register'];
            const url = `?name=${form.name.value}&gender=${form.gender.value}`;
            fetch(`/fetch${url}`, {
                method: 'GET'
            }).then( res => {
                //json응답을 네이티브 자바스크립트 객체로 파싱 
                console.log('res', res);
                return res.json(); //응답을 객체형태로 보냈기 때문에 json()

            }).then(data =>{
                console.log('data',data)
                resultBox.textContent = `get / fetch 요청완료 ${data.name}님은 ${data.gender}입니다`
                resultBox.style.color = 'orange'
            })
        }
        function fetchPost(){
            console.log('fetch post');
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value,
            };
            
            fetch('/fetch',{
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body:JSON.stringify(data)
                //JSON.stringify(): 자바스크립트객체를 json텍스트로 변환 
                //JSON.parse(): json형식의 텍스트를 자바스크립트 객체로 변환
            }).then((res)=>{
                console.log('res',res)
                return res.json()
            }).then((data) =>{
                console.log('data',data);
                resultBox.textContent = `post / fetch 요청완료 ${data.name}님은 ${data.gender}입니다`
                resultBox.style.color = 'pink'
            })
        }
    </script>
</body>

</html>